统一格式(general format)：
日期(date)：
题号(Question Number)：
Code:
Note: 
Tag: <all_lowercase> <language>

2020.7.31
#1
//
unordered_map<int, int> map;
map[i] = 1;
//
N: unordered_map is Hashmap
<cpp> <hashmap>

#26
// p is an iterator
if (*p != *(p+1) || (p+1) == nums.end())
This will cause index out of bound
==31==ERROR: AddressSanitizer: heap-buffer-overflow

if ((p+1) == nums.end() || *p != *(p+1))
This will not
//
Always checks boundary first.
<cpp> <debug>

#26
// using erase()
for(;iterator != vector.end();)
if (condition to erase) {
	vector.erase(iterator);
} else {
	iterator++;
}
erase will automatically make iterator + 1 become the next unremoved element.
<cpp> <erase()> <iterator>

#NULL
vector sort()
sort(vector.begin(), vector.end());
<cpp> <vector> <sort>

2020.8.2
#11
Two Pointer approach:
//
two iterators at begin() and end():
if (condition A) { 
	move the left iterator right
} else { 
	move the right iterator left
}
//
Used to find maximum with two variables.
O(n)
<algorithm> <two_pointers>

2020.8.3
#34
lower_bound(iterator, iterator, value)
return index for some value in a sorted vector
<cpp> <binary_search>

binary search (lower bound)
start = 0, end = size - 1
while (start <= end) {
	mid = (end - start) / 2 + start
	if ()
		start = mid + 1
	else 
		end = mid - 1
}
return start <------ /* !!! */ 
<algorithm> <binary_search>

2020.8.6
#208
TrieTree
one node for one character and every node has 26 children.
//
struct trieNode {
        bool isEnd;
        unordered_map<char, Node *> child;
}
/*
use a recursive helper function to do the search
*/
//
<structure> <trietree>

how to insert value into umap:
//
unordered_map[key] = value;
//

you can also do this:
//
for loop:
	Node * temp;
	umap[key] = temp;
end loop;
// <---- it works.
<cpp> <hashmap>

2020.8.7
#215
//
nth_element(iter.begin(), iter.target(), iter.end())
//
put the (target-begin)-th element in iter.target(), increasing order.

//
make_heap(iter.begin(), iter.end()) ---> void
heap_pop(iter.begin(), iter.end()) ---> void --> put the popped element in ( iter.end() - 1 )
//
<cpp> <heap>

#August Challenge day 7
//
sort(iter.begin(), iter.end()) ----> this is a void function!
//
<cpp> <sort()>

iterate through unordered_map:
//
for (auto & v : umap) {
	v.first ----> key
	v.second ----> value
}
//
<cpp> <hashmap>

2020.8.8
#August Challenge day 8
BST but you care about the depth of the row;
//
while (queue is not empty) {
	k = queue.size()
	while (k--) {
		/* function */
		enqueue(curr.left)
		enqueue(curr.right)
	}
}
//
don't care:
remove the inner nested loop
<algorithm> <bst>

2020.8.10
#21
create linked list:
need 3 nodes: root, curr, next
//
Node root = new Node()
Node curr = root

while()
Node next = new Node()
next.value = value
curr.next = next
curr = curr.next
//
<structure> <linkedlist> 

2020.8.14
#210
topological sort
method 1, dfs:
➔ let S be a stack of courses
➔ function dfs(node)
➔     for each neighbor in adjacency list of node
➔          dfs(neighbor)
➔     add node to S
need to keep a visited-node-list
need a adjacent node table

method 2, node indegree
➔ add node with 0 indegree
➔ node adjacent indegree - 1
➔ delete it
➔ repeat
<algorithm> <topological_sort>

2020.8.15
#435
sort(iter,iter,comp) 
(+static, when defined in a class) bool comp (a, b)
return true, then a < b
<sort()>

for i in array:
	if (false condition):
		...
	else:
		prev = curr ----> only set prev when true to find the longest chain
<algorithm> <greedy>

2020.8.16
#123
dynamic programming:
if you know how to get to your goal from position K, and there's only limited ways to get to position K, then that's a DP.
//
bestSale ---> highest profit if you sale at this point
bestBuy ---> highest profit if you buy at this point
both can be calculated in one iteration
//
<algorithm> <dynamic_programming>

2020.8.18
#3
find for vector: find(v.begin(), v.end(), value)
find for unordered_map: umap.find(key)
<find()> <cpp>

2020.8.19
#23
priority_queue in cpp
//
#include <queue>
//
<priority_queue> <cpp>

2020.8.21
measure running time in cpp:
//
auto t1 = std::chrono::high_resolution_clock::now();
duration<double, std::milli> time_span = t2 - t1;
std::cout << "It took me " << time_span.count() << " milliseconds.";
//
<timer> <cpp>

#496
Next Greater Element:
stack:
	while (stack not empty and stack.top < curr) {
		top = stack.pop
		top.nextGreater = curr;
	}
	stack.push(curr)

stack must be in a descending order
so compare current element with 1-n top element, if greater, then we find it.

#1032
Find Word in Character Stream:
TrieTree:
but reverse word and find prefix
<trietree> <algorithm>

2020.8.26
#983
DP to meet certain point:
start with zero
DP through every point
	if point not required:
		value[i] = value[i-1]
	else
		DP(value[i])
<DP> <algorithm>

python, claim a zero list
dp=[0 for i in range(...)]
<list> <python>

2020.8.27
CS 357
python: sort list with elem[1] descending then elem[0] ascending:
list = [(  ,  ),(  ,  ),(  ,  ),(  ,  )]
//
list.sort(key = lambda elem: (-elem[1], elem[0]))
or
sorted(list, key = lambda elem: (-elem[1], elem[0]))
//
<sort> <python>

dict.get(key, default)
if key doesn't exist, return default
<dict> <python>

sort with index
//
a = [value list]
b = [index list]
output = zip(*sorted(zip(a,b)))
//
Explain: zip(a,b) -> [(0,val)(1,val)(2,val)...]
sorted -> sorted
* -> zip((0, val),(1,val),(2,val)...) -> [(0,1,2...),(val,val,val...)]
without zip():
l = sorted((e.start, i) for i, e in enumerate(intervals))
<sort> <python>

#436
//
index = bisect.bisect_left(list, key)
bisect.bisect_left(list, (key,)) to search in a list of tuples
//
<bisect> <python>

#952
union
set up union list by their common properties, not individual features.
largest common divdier graph: set list by prime factor
2: {4,12}, 3: {12, 30}, etc
then do the union
<union> <algorithm>

#949
//
itertools.permutations(A)
//
return all the permutations of A in tuples, (1,2,3), (1,3,2), etc
<permutation> <python>

#763
every string with their rightmost index:
//
S = some string
{c:i for i, c in enumerate(S)}
//
<dict> <python>

#835 Image Overlap
Find similar pattern on two binary images:
(max number of "1"s in the map)
1. store the coor of "1" of the two images in two umaps
2. for every coor in umaps1, get the difference between it and every coor in umap2
3. map the difference to its counts in umap3
<image> <algorithm>

create class var in python:
don't need to declare in __init__
just //self.var = value// in the class function
<class> <python>

#421 max XOR in an array:
int -> 32bits
so we iterate 32 times through the array, each time one digit.
lessen the candidate choices as we moving from the leftmost bit to the rightmost
and we want as more bits on the left as possible
<bitwise> <algorithm>