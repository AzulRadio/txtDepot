统一格式(general format)：
日期(date)：
题号(Question Number)：
Code:
Note: 
Tag: <all_lowercase> <language>

2020.7.31
#1
//
unordered_map<int, int> map;
map[i] = 1;
//
N: unordered_map is Hashmap
<cpp> <hashmap>

#26
// p is an iterator
if (*p != *(p+1) || (p+1) == nums.end())
This will cause index out of bound
==31==ERROR: AddressSanitizer: heap-buffer-overflow

if ((p+1) == nums.end() || *p != *(p+1))
This will not
//
Always checks boundary first.
<cpp>

#26
// using erase()
for(;iterator != vector.end();)
if (condition to erase) {
	vector.erase(iterator);
} else {
	iterator++;
}
erase will automatically make iterator + 1 become the next unremoved element.
<cpp> <erase()> <iterator>

#NULL
vector sort()
sort(vector.begin(), vector.end());
<cpp> <vector> <sort>

2020.8.2
#11
Two Pointer approach:
//
two iterators at begin() and end():
if (condition A) { 
	move the left iterator right
} else { 
	move the right iterator left
}
//
Used to find maximum with two variables.
O(n)
<algorithm>

2020.8.3
#34
lower_bound(iterator, iterator, value)
return index for some value in a sorted vector
<cpp> <binary_search>

binary search (lower bound)
start = 0, end = size - 1
while (start <= end) {
	mid = (end - start) / 2 + start
	if ()
		start = mid + 1
	else 
		end = mid - 1
}
return start <------ /* !!! */ 
<algorithm>

2020.8.6
#208
TrieTree
one node for one character and every node has 26 children.
//
struct trieNode {
        bool isEnd;
        unordered_map<char, Node *> child;
}
/*
use a recursive helper function to do the search
*/
//
<structure>

how to insert value into umap:
//
unordered_map[key] = value;
//

you can also do this:
//
for loop:
	Node * temp;
	umap[key] = temp;
end loop;
// <---- it works.
<cpp>

2020.8.7
#215
//
nth_element(iter.begin(), iter.target(), iter.end())
//
put the (target-begin)-th element in iter.target(), increasing order.

//
make_heap(iter.begin(), iter.end()) ---> void
heap_pop(iter.begin(), iter.end()) ---> void --> put the popped element in ( iter.end() - 1 )
//
<cpp>

#August Challenge day 7
//
sort(iter.begin(), iter.end()) ----> this is a void function!
//
<cpp>

iterate through unordered_map:
//
for (auto & v : umap) {
	v.first ----> key
	v.second ----> value
}
//
<cpp>